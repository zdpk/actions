name: 'GitHub Release Assets Upload'
description: 'Upload multiple assets to GitHub Release'
inputs:
  tag_name:
    description: 'Release tag name'
    required: true
  built_binaries:
    description: 'JSON array of built binary information from rust-build action'
    required: true
  platform:
    description: 'Platform identifier (e.g., macos, linux, windows)'
    required: true
  arch:
    description: 'Architecture identifier (e.g., arm64, x64)'
    required: true
  token:
    description: 'GitHub token for release upload'
    required: true
outputs:
  uploaded_assets:
    description: 'List of uploaded asset names'
    value: ${{ steps.upload.outputs.uploaded_assets }}

runs:
  using: 'composite'
  steps:
    - name: Prepare and upload assets
      id: upload
      shell: bash
      run: |
        # Parse built binaries JSON
        built_binaries='${{ inputs.built_binaries }}'
        echo "Processing binaries: $built_binaries"
        
        # Prepare assets and file list
        asset_files=""
        uploaded_assets=""
        
        # Use jq to parse JSON if available, otherwise use basic parsing
        if command -v jq >/dev/null 2>&1; then
          # Use jq for robust JSON parsing
          echo "$built_binaries" | jq -r '.[] | @base64' | while IFS= read -r binary_b64; do
            binary_info=$(echo "$binary_b64" | base64 --decode)
            binary_name=$(echo "$binary_info" | jq -r '.name')
            source_path=$(echo "$binary_info" | jq -r '.source_path')
            extension=$(echo "$binary_info" | jq -r '.extension')
            
            # Create asset name
            asset_name="${binary_name}-${{ inputs.platform }}-${{ inputs.arch }}${extension}"
            
            # Copy binary to asset name
            cp "$source_path" "$asset_name"
            
            # Add to file list
            if [ -n "$asset_files" ]; then
              asset_files="$asset_files,$asset_name"
            else
              asset_files="$asset_name"
            fi
            
            # Add to uploaded assets list
            if [ -n "$uploaded_assets" ]; then
              uploaded_assets="$uploaded_assets,$asset_name"
            else
              uploaded_assets="$asset_name"
            fi
            
            echo "Prepared asset: $asset_name from $source_path"
          done
        else
          # Fallback: Basic parsing for simple cases
          # Extract binary names (assuming format: [{"name":"pm",...},{"name":"_pm",...}])
          binary_names=$(echo "$built_binaries" | sed 's/.*"name":"\([^"]*\)".*/\1/g')
          
          for binary_name in $binary_names; do
            # Determine extension based on platform
            if [[ "${{ inputs.platform }}" == "windows" ]]; then
              extension=".exe"
              source_binary="${binary_name}.exe"
            else
              extension=""
              source_binary="$binary_name"
            fi
            
            source_path="target/${{ inputs.platform }}-${{ inputs.arch }}/release/$source_binary"
            asset_name="${binary_name}-${{ inputs.platform }}-${{ inputs.arch }}${extension}"
            
            # Check if source exists and copy
            if [ -f "$source_path" ]; then
              cp "$source_path" "$asset_name"
              
              if [ -n "$asset_files" ]; then
                asset_files="$asset_files,$asset_name"
              else
                asset_files="$asset_name"
              fi
              
              if [ -n "$uploaded_assets" ]; then
                uploaded_assets="$uploaded_assets,$asset_name"
              else
                uploaded_assets="$asset_name"
              fi
              
              echo "Prepared asset: $asset_name"
            else
              echo "Warning: Source binary not found: $source_path"
            fi
          done
        fi
        
        # Store for next step
        echo "asset_files=$asset_files" >> $GITHUB_ENV
        echo "uploaded_assets=$uploaded_assets" >> $GITHUB_OUTPUT
        echo "Assets to upload: $asset_files"
        
    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ inputs.tag_name }}
        files: ${{ env.asset_files }}
        token: ${{ inputs.token }}