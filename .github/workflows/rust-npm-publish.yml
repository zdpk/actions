name: 'Rust NPM Publish'

on:
  workflow_call:
    inputs:
      binaries:
        description: 'Binaries to build and release (comma-separated): pm,_pm or "all"'
        required: false
        default: 'all'
        type: string
      platforms:
        description: 'Platforms to build: macos-arm64,linux-x64,linux-arm64,windows-x64,windows-arm64 or "all"'
        required: false
        default: 'all'
        type: string
      main_binary:
        description: 'Main binary name for NPM (e.g., pm)'
        required: true
        type: string
      npm_enabled:
        description: 'Enable NPM publishing'
        required: false
        default: true
        type: boolean
      npm_directory:
        description: 'Directory containing NPM project'
        required: false
        default: 'npm'
        type: string
      tag_name:
        description: 'Release tag name (auto-detected if not provided)'
        required: false
        type: string
      rust_version:
        description: 'Rust toolchain version (e.g., stable, 1.70.0, nightly)'
        required: false
        default: 'stable'
        type: string
      node_version:
        description: 'Node.js version for NPM publishing (e.g., 18, 20, lts/*, latest)'
        required: false
        default: 'lts/*'
        type: string
    secrets:
      NPM_TOKEN:
        description: 'NPM authentication token'
        required: false
      GITHUB_TOKEN:
        description: 'GitHub token for release'
        required: true

env:
  CARGO_TERM_COLOR: always

jobs:
  # Prepare build matrix based on platform inputs
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
      binaries: ${{ steps.matrix.outputs.binaries }}
      tag_name: ${{ steps.matrix.outputs.tag_name }}
    steps:
      - name: Prepare build matrix and binaries
        id: matrix
        run: |
          # Determine tag name
          if [ -n "${{ inputs.tag_name }}" ]; then
            tag_name="${{ inputs.tag_name }}"
          else
            tag_name="${{ github.ref_name }}"
          fi
          echo "tag_name=$tag_name" >> $GITHUB_OUTPUT
          
          # Define all available platforms
          all_platforms='[
            {
              "os": "macos-latest",
              "platform": "macos",
              "arch": "arm64",
              "target": "aarch64-apple-darwin",
              "cross_compile": false
            },
            {
              "os": "ubuntu-latest",
              "platform": "linux",
              "arch": "x64",
              "target": "x86_64-unknown-linux-gnu",
              "cross_compile": false
            },
            {
              "os": "ubuntu-latest",
              "platform": "linux",
              "arch": "arm64",
              "target": "aarch64-unknown-linux-gnu",
              "cross_compile": true
            },
            {
              "os": "windows-latest",
              "platform": "windows",
              "arch": "x64",
              "target": "x86_64-pc-windows-msvc",
              "cross_compile": false
            },
            {
              "os": "windows-latest",
              "platform": "windows",
              "arch": "arm64",
              "target": "aarch64-pc-windows-msvc",
              "cross_compile": false
            }
          ]'
          
          # Filter platforms based on input
          if [ "${{ inputs.platforms }}" = "all" ]; then
            selected_platforms="$all_platforms"
          else
            # Parse comma-separated platform list and filter
            selected_platforms="[]"
            IFS=',' read -ra PLATFORM_ARRAY <<< "${{ inputs.platforms }}"
            
            for platform_arch in "${PLATFORM_ARRAY[@]}"; do
              platform_arch=$(echo "$platform_arch" | xargs) # trim whitespace
              
              # Extract matching platform from all_platforms
              matching_platform=$(echo "$all_platforms" | jq --arg pa "$platform_arch" '.[] | select(.platform + "-" + .arch == $pa)')
              
              if [ -n "$matching_platform" ]; then
                selected_platforms=$(echo "$selected_platforms" | jq ". += [$matching_platform]")
              else
                echo "Warning: Unknown platform '$platform_arch' ignored"
              fi
            done
          fi
          
          matrix_json="{\"include\":$selected_platforms}"
          echo "matrix=$matrix_json" >> $GITHUB_OUTPUT
          
          # Determine binaries to build
          if [ "${{ inputs.binaries }}" = "all" ]; then
            # List all binaries from Cargo.toml and filter out those starting with _
            all_binaries=$(grep -oP '^[[bin]]\nname = "\K[^"]+' Cargo.toml | grep -v '^_')
            binaries=$(echo "$all_binaries" | tr '\n' ',' | sed 's/,$//')
            # If all binaries were filtered, default to main_binary
            if [ -z "$binaries" ]; then
              binaries="${{ inputs.main_binary }}"
            fi
          else
            binaries="${{ inputs.binaries }}"
          fi
          echo "binaries=$binaries" >> $GITHUB_OUTPUT
          
          echo "Selected platforms: $selected_platforms"
          echo "Binaries to build: $binaries"
          echo "Tag name: $tag_name"

  # Build binaries for each platform
  build:
    needs: prepare-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Build Rust binaries
        id: build
        uses: ./actions/actions/rust-build
        with:
          target: ${{ matrix.target }}
          binaries: ${{ needs.prepare-matrix.outputs.binaries }}
          cross_compile: ${{ matrix.cross_compile }}
          rust_version: ${{ inputs.rust_version }}
          
      - name: Upload to GitHub Release
        uses: ./actions/actions/github-release
        with:
          tag_name: ${{ needs.prepare-matrix.outputs.tag_name }}
          built_binaries: ${{ steps.build.outputs.built_binaries }}
          platform: ${{ matrix.platform }}
          arch: ${{ matrix.arch }}
          token: ${{ secrets.GH_TOKEN }}

  # Publish to NPM after all builds complete
  publish-npm:
    if: inputs.npm_enabled
    needs: [prepare-matrix, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Extract version from Cargo.toml
        id: version
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"
          
      - name: Publish to NPM
        uses: ./actions/actions/npm-publish
        with:
          npm_directory: ${{ inputs.npm_directory }}
          version: ${{ steps.version.outputs.version }}
          token: ${{ secrets.NPM_TOKEN }}
          node_version: ${{ inputs.node_version }}